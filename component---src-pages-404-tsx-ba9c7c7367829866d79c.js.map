{"version":3,"sources":["webpack:///./src/web/components/ExternalSearchLinks.tsx","webpack:///./src/pages/404.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/gatsby-hooks/useSiteContent.ts","webpack:///./.cache/public-page-renderer.js","webpack:///./src/web-search/SearchItem.tsx","webpack:///./src/web-search/SearchProvider.tsx","webpack:///./src/web-search/SearchModal.tsx","webpack:///./src/web-search/LiveSearchInput.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/web/containers/Layout.tsx","webpack:///./src/helpers/index.ts","webpack:///./src/web-search/index.tsx"],"names":["ExternalSearchLinks","_ref","keyword","query","phrase","react_default","a","createElement","href","__webpack_require__","d","__webpack_exports__","_404_NotFoundPage","NotFoundPage","CONTENT","useSiteContent","pathname","location","keywordify","labels","title","notFound","description","home","Layout","components_ExternalSearchLinks","web_search","gatsby_browser_entry","to","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","data","render","children","propTypes","PropTypes","object","string","isRequired","func","_public_static_d_67531095_json__WEBPACK_IMPORTED_MODULE_0__","site","siteMetadata","content","m","module","exports","require","default","SearchItem","page","className","CSS","root","nodePath","link","path","category","SearchProvider","_React$Component","_this","call","this","state","results","searchOpts","fields","boost","expand","getOrCreateIndex","index","Index","load","siteSearchIndex","handleInput","evt","target","value","setState","doSearch","search","map","ref","documentStore","getDoc","initialValue","Object","assign","inheritsLoose_default","prototype","rprops","onChange","Component","SearchModalView","onDismiss","onClick","type","autoFocus","length","list","web_search_SearchItem","key","SearchModal","web_search_SearchProvider","SearchModal_SearchModalView","DEFAULT_STATE","isActivated","LiveSearchInput","_2959298900","_useAppState","useAppState","actions","placeholder","Fragment","input","web_search_SearchModal","dismissModal","_useState","useState","event","trim","defaultProps","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","InternalPageRenderer","json","shape","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","meta","name","unpath","replace","str","slice","_LiveSearchInput__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"kKAyDeA,EA5CoB,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,QAC9BC,EAAQD,EACRE,EAASC,EAAAC,EAAAC,cAAA,YAAOL,GAEtB,OACEG,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,KAAI,qCAAuCL,GAA9C,UACUC,EADV,gBAIFC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEC,KAAI,+BAAiCL,EAAjC,sDADN,UAGUC,EAHV,eAMFC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,KAAI,8BAAgCL,GAAvC,UACUC,EADV,YAIFC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,KAAI,yBAA2BL,GAAlC,UACUC,EADV,mBAIFC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,KAAI,gDAAkDL,GAAzD,UACUC,EADV,YAIFC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEC,KAAI,kCAAoCL,EAApC,sDAEHC,EAHH,gCC/CRK,EAAAC,EAAAC,EAAA,iCAAAC,IAaO,IAAMC,EAAe,WAC1B,IAAMC,EAAUC,cAEVC,EAA+B,oBAAbC,SAA2BA,SAASD,SAAW,KACjEd,EAAUgB,YAAWF,GAErBG,EAAS,CACbC,MAAON,EAAQO,SAASD,MACxBE,YAAaR,EAAQO,SAASC,YAC9BC,KAAMT,EAAQO,SAASE,MAGzB,OACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKY,EAAOC,OACZf,EAAAC,EAAAC,cAAA,SAAIY,EAAOG,aACVpB,GAAWG,EAAAC,EAAAC,cAACkB,EAAD,CAAqBvB,QAASA,IAC1CG,EAAAC,EAAAC,cAACmB,EAAA,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAG,KAAKT,EAAOI,SAMdV,8CCtCfJ,EAAAC,EAAAC,EAAA,sBAAAkB,IAAA,IAAAC,EAAArB,EAAA,GAAAsB,EAAAtB,EAAAuB,EAAAF,GAAAG,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAAuB,EAAAC,GAAAE,EAAA1B,EAAA,IAAA2B,EAAA3B,EAAAuB,EAAAG,GAAA1B,EAAAC,EAAAC,EAAA,sBAAAyB,EAAA9B,IAAAG,EAAA,SAYM4B,EAAqBC,IAAMC,cAAc,IAEzCV,EAAc,SAAAW,GAAK,OACvBT,EAAAzB,EAAAC,cAAC8B,EAAmBI,SAApB,KACG,SAAAC,GACC,OACEF,EAAMG,MACLD,EAAgBF,EAAMrC,QAAUuC,EAAgBF,EAAMrC,OAAOwC,MAEtDH,EAAMI,QAAUJ,EAAMK,UAC5BL,EAAMG,KAAOH,EAAMG,KAAKA,KAAOD,EAAgBF,EAAMrC,OAAOwC,MAGvDZ,EAAAzB,EAAAC,cAAA,uCA4BfsB,EAAYiB,UAAY,CACtBH,KAAMI,IAAUC,OAChB7C,MAAO4C,IAAUE,OAAOC,WACxBN,OAAQG,IAAUI,KAClBN,SAAUE,IAAUI,qDCYPpC,IA/DQ,WA4DrB,OAAOqC,EAAAT,KAAsBU,KAAKC,aAAaC,8BClEjD,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,6HCsBhCK,EAZI,SAAA5D,GAAqB,IAAlB6D,EAAkB7D,EAAlB6D,KACpB,OACEzD,EAAAC,EAAAC,cAAA,MAAIwD,UAAWC,IAAIC,MACjB5D,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAIkC,EAAKI,SAAUH,UAAWC,IAAIG,MACtC9D,EAAAC,EAAAC,cAAA,UAAQwD,UAAWC,IAAII,MAAON,EAAKI,UACnC7D,EAAAC,EAAAC,cAAA,SAAOwD,UAAWC,IAAI5C,OAAQ0C,EAAK1C,OACnCf,EAAAC,EAAAC,cAAA,SAAOwD,UAAWC,IAAIK,UAAWP,EAAKO,gECwF/BC,EAxEf,SAAAC,GAiBE,SAAAD,EAAY9B,GAAc,IAAAgC,GACxBA,EAAAD,EAAAE,KAAAC,KAAMlC,IAANkC,MAfFC,MAAQ,CACNxE,MAAO,GACPyE,QAAS,IAYeJ,EAR1BK,WAAa,CACXC,OAAQ,CACNZ,SAAU,CAAEa,MAAO,GACnB3D,MAAO,CAAE2D,MAAO,IAElBC,QAAQ,GAGgBR,EAW1BS,iBAAmB,WACjB,GAAIT,EAAKU,MAAO,OAAOV,EAAKU,MAE5B,IAAMA,EAAQC,QAAMC,KAAKZ,EAAKhC,MAAM6C,gBAAgBH,OAEpD,OADAV,EAAKU,MAAQA,EACNA,GAhBiBV,EAuB1Bc,YAAc,SAACC,GACb,IAAMpF,EAAQoF,EAAIC,OAAOC,MACzBjB,EAAKkB,SAASlB,EAAKmB,SAASxF,KAzBJqE,EAgC1BmB,SAAW,SAACxF,GASV,MAAO,CAAEA,QAAOyE,QARFJ,EAAKS,mBAKhBW,OAAOzF,EAAOqE,EAAKK,YACnBgB,IAAI,SAAA5F,GAAA,IAAG6F,EAAH7F,EAAG6F,IAAH,OAAkBtB,EAAKU,MAAMa,cAAcC,OAAOF,OArCzD,IAAM3F,EAAQqC,EAAMyD,aAFI,OAIpB9F,GAAO+F,OAAOC,OAAO3B,EAAKG,MAAOH,EAAKmB,SAASxF,IAJ3BqE,EAjB5B,OAAA4B,IAAA9B,EAAAC,GAAAD,EAAA+B,UA6DEzD,OAAA,WACE,IAAM0D,EAAsB,CAC1BnG,MAAOuE,KAAKC,MAAMxE,MAClByE,QAASF,KAAKC,MAAMC,QACpB2B,SAAU7B,KAAKY,aAGjB,OAAOZ,KAAKlC,MAAMK,SAASyD,IApE/BhC,EAAA,CAAoChC,IAAMkE,WCI7BC,EAAkB,SAAAxG,GAKd,IAJfE,EAIeF,EAJfE,MACAyE,EAGe3E,EAHf2E,QACA2B,EAEetG,EAFfsG,SACAG,EACezG,EADfyG,UAEA,OACErG,EAAAC,EAAAC,cAAA,OAAKwD,UAAWC,IAAIC,MAClB5D,EAAAC,EAAAC,cAAA,UAAQoG,QAASD,GAAjB,KAEArG,EAAAC,EAAAC,cAAA,SAAOqG,KAAK,OAAOnB,MAAOtF,EAAOoG,SAAUA,EAAUM,WAAS,IAC7DjC,GAAWA,EAAQkC,OAClBzG,EAAAC,EAAAC,cAAA,MAAIwD,UAAWC,IAAI+C,MAChBnC,EAAQiB,IAAI,SAAC/B,GAAD,OACXzD,EAAAC,EAAAC,cAACyG,EAAD,CAAYlD,KAAMA,EAAMmD,IAAKnD,EAAK1C,WAItCf,EAAAC,EAAAC,cAAA,kCAMO2G,EAtCY,SAAC1E,GAC1B,OACEnC,EAAAC,EAAAC,cAAC4G,EAAmB3E,EACjB,SAAC8D,GAAD,OACCjG,EAAAC,EAAAC,cAAC6G,EAADlB,OAAAC,OAAA,GAAqBG,EAArB,CAA6BI,UAAWlE,EAAMkE,gBCjBhDW,EAAgB,CACpBC,aAAa,EACbrB,aAAc,IAOVsB,EAAkB,SAAC/E,GAAiB,IAChC6C,EADgCmC,EAAA7E,KAChC0C,gBADgCoC,EAEbC,IAAnB/C,EAFgC8C,EAEhC9C,MAAOgD,EAFyBF,EAEzBE,QACPC,EAAgBpF,EAAhBoF,YAER,OACEvH,EAAAC,EAAAC,cAACF,EAAAC,EAAMuH,SAAP,KACExH,EAAAC,EAAAC,cAAA,SACEqG,KAAK,OACLgB,YAAaA,GAAe,YAC5B7D,UAAWC,IAAI8D,MACfvB,SAAUoB,EAAQrC,YAClBG,MAAM,KAGPd,EAAM2C,YACLjH,EAAAC,EAAAC,cAACwH,EAAD,CACE1C,gBAAiBA,EACjBY,aAActB,EAAMsB,aACpBS,UAAWiB,EAAQK,eAEnB,OAKJN,EAAc,WAAM,IAAAO,EACEC,mBAAgBb,GAAnC1C,EADiBsD,EAAA,GACVvC,EADUuC,EAAA,GAcxB,MAAO,CAAEtD,QAAOgD,QAZA,CACdrC,YADc,SACF6C,GACV,IAAM1C,EAAQ0C,EAAM3C,OAAOC,MAEvBA,EAAM2C,OAAOtB,QACfpB,EAAQQ,OAAAC,OAAA,GAAMxB,EAAN,CAAa2C,aAAa,EAAMrB,aAAcR,MAG1DuC,aARc,WASZtC,EAAQQ,OAAAC,OAAA,GAAMxB,EAAN,CAAa2C,aAAa,SAMxCC,EAAgBc,aAAe,CAC7BT,YAAa,aAuCAL,6vBC/FTe,EAAmB,SAAArI,GAAkB,IAAfgB,EAAehB,EAAfgB,SACpBsH,EAAgBC,UAAOC,4BAA4BxH,EAASD,UAClE,OAAOsB,IAAM/B,cAAcmI,IAApBxC,OAAAC,OAAA,CACLlF,WACAsH,iBACGA,EAAcI,QAIrBL,EAAiBxF,UAAY,CAC3B7B,SAAU8B,IAAU6F,MAAM,CACxB5H,SAAU+B,IAAUE,OAAOC,aAC1BA,YAGUoF,4hKCrBf,IAAAxG,EAAArB,EAAA,GAAAsB,EAAAtB,EAAAuB,EAAAF,GAAA+G,EAAApI,EAAA,KAAAqI,EAAArI,EAAAuB,EAAA6G,GA+BerH,IAhBf,SAAAvB,GAAqC,IAAnB4C,EAAmB5C,EAAnB4C,SAChB,OACEd,EAAAzB,EAAAC,cAAAwB,EAAAzB,EAAAuH,SAAA,KACE9F,EAAAzB,EAAAC,cAACuI,EAAAxI,EAAD,CACEc,MAAM,cACN2H,KAAM,CAEJ,CAAEC,KAAM,cAAezF,QAAS,UAChC,CAAEyF,KAAM,WAAYzF,QAAS,wBAGhCV,4GCrBA,SAASoG,EAAO7E,GACrB,OAAOA,EAAK8E,QAAQ,MAAO,IAWtB,SAAShI,EAAWiI,GACzB,OAAKA,EAIEA,EACJC,MAAM,GACNF,QAAQ,oBAAqB,IAC7BA,QAAQ,MAAO,KACfA,QAAQ,KAAM,KACdA,QAAQ,UAAW,IARb,wCCnBX,IAAAG,EAAA5I,EAAA,KAAAA,EAAAC,EAAAC,EAAA,sBAAA0I,EAAA","file":"component---src-pages-404-tsx-ba9c7c7367829866d79c.js","sourcesContent":["import React from 'react'\n\nexport interface Props {\n  keyword: string\n}\n\n/**\n * Links to external sources.\n *\n * @example\n *     <ExternalSearchLinks keyword='gatsby' />\n */\n\nexport const ExternalSearchLinks = ({ keyword }: Props) => {\n  const query = keyword\n  const phrase = <code>{keyword}</code>\n\n  return (\n    <ul>\n      <li>\n        <a href={`https://yarnpkg.com/en/packages?q=${query}`}>\n          Search {phrase} on Yarn.pm\n        </a>\n      </li>\n      <li>\n        <a\n          href={`https://github.com/search?q=${query}&type=Everything&repo=&langOverride=&start_value=1`}\n        >\n          Search {phrase} on GitHub\n        </a>\n      </li>\n      <li>\n        <a href={`https://npmjs.com/search?q=${query}`}>\n          Search {phrase} on npm\n        </a>\n      </li>\n      <li>\n        <a href={`https://devdocs.io/?q=${query}`}>\n          Search {phrase} on devdocs.io\n        </a>\n      </li>\n      <li>\n        <a href={`https://developer.mozilla.org/en-US/search?q=${query}`}>\n          Search {phrase} on MDN\n        </a>\n      </li>\n      <li>\n        <a\n          href={`https://next.duckduckgo.com/?q=${query}+cheatsheet&ia=cheatsheet&iax=1#zero_click_wrapper`}\n        >\n          {phrase} cheatsheet on DuckDuckGo\n        </a>\n      </li>\n    </ul>\n  )\n}\n\nexport default ExternalSearchLinks\n","import { Link } from 'gatsby'\nimport React from 'react'\nimport { keywordify } from '../helpers'\nimport Layout from '../web/containers/Layout'\n\nimport useSiteContent from '../gatsby-hooks/useSiteContent'\nimport { LiveSearchInput } from '../web-search'\nimport ExternalSearchLinks from '../web/components/ExternalSearchLinks'\n\n/**\n * The 404 page.\n */\n\nexport const NotFoundPage = () => {\n  const CONTENT = useSiteContent()\n\n  const pathname = typeof location !== 'undefined' ? location.pathname : null\n  const keyword = keywordify(pathname)\n\n  const labels = {\n    title: CONTENT.notFound.title,\n    description: CONTENT.notFound.description,\n    home: CONTENT.notFound.home\n  }\n\n  return (\n    <Layout>\n      <div>\n        <h1>{labels.title}</h1>\n        <p>{labels.description}</p>\n        {keyword && <ExternalSearchLinks keyword={keyword} />}\n        <LiveSearchInput />\n        <Link to='/'>{labels.home}</Link>\n      </div>\n    </Layout>\n  )\n}\n\nexport default NotFoundPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import { graphql, useStaticQuery } from 'gatsby'\n\n/**\n * Hook for accessing site content (labels and stuff)\n */\n\nconst useSiteContent = (): {\n  home: {\n    description: string\n    recentlyUpdated: string\n    title: string\n    updatedLabel: string\n  }\n  sheet: {\n    suffix: string\n  }\n  siteHeader: {\n    title: string\n    tagline: string\n  }\n  topNav: {\n    edit: string\n    editOnGithub: string\n    title: string\n  }\n  notFound: {\n    description: string\n    home: string\n    title: string\n  }\n} => {\n  // Add more stuff here as needed\n  const QUERY = graphql`\n    {\n      site {\n        siteMetadata {\n          content {\n            sheet {\n              suffix\n            }\n            siteHeader {\n              title\n              tagline\n            }\n            home {\n              description\n              recentlyUpdated\n              title\n              updatedLabel\n            }\n            notFound {\n              description\n              home\n              title\n            }\n            topNav {\n              edit\n              editOnGithub\n              title\n            }\n          }\n        }\n      }\n    }\n  `\n\n  return useStaticQuery(QUERY).site.siteMetadata.content\n}\n\nexport default useSiteContent\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import { Link } from 'gatsby'\nimport React from 'react'\nimport CSS from './SearchItem.module.css'\n\nimport { SearchPageItem } from '../types/types'\n\nexport interface Props {\n  page: SearchPageItem\n}\n\nconst SearchItem = ({ page }: Props) => {\n  return (\n    <li className={CSS.root}>\n      <Link to={page.nodePath} className={CSS.link}>\n        <strong className={CSS.path}>{page.nodePath}</strong>\n        <small className={CSS.title}>{page.title}</small>\n        <small className={CSS.category}>{page.category}</small>\n      </Link>\n    </li>\n  )\n}\n\nexport default SearchItem\n","import { Index } from 'elasticlunr'\nimport React from 'react'\nimport { SearchPageItem, SiteSearchIndex } from '../types/types'\n\n// To be passed onto children\nexport interface RenderProps {\n  query: string\n  results: SearchPageItem[]\n  onChange: (arg0: any) => void\n}\n\nexport interface Props {\n  siteSearchIndex: SiteSearchIndex\n  initialValue?: string\n  children: (rprops: RenderProps) => React.ReactNode\n}\n\nexport interface State {\n  query: string\n  results: SearchPageItem[]\n}\n\n/**\n * @example\n *     <SearchProvider siteSearchIndex={index}>\n *       {({ query, results, onChange }) => (\n *         <input value={query} onChange={onChange} />\n *         <pre>{JSON.stringify(results, null, 2)}</pre>\n *       )}\n *     </SearchProvider>\n */\n\nexport class SearchProvider extends React.Component<Props, State> {\n  index: any\n\n  state = {\n    query: '',\n    results: []\n  }\n\n  // Options passed onto elasticlunr.js\n  searchOpts = {\n    fields: {\n      nodePath: { boost: 3 },\n      title: { boost: 1 }\n    },\n    expand: true\n  }\n\n  constructor(props: Props) {\n    super(props)\n    const query = props.initialValue\n\n    if (query) Object.assign(this.state, this.doSearch(query))\n  }\n\n  /**\n   * Returns the ElasticLunr index.\n   */\n\n  getOrCreateIndex = () => {\n    if (this.index) return this.index\n\n    const index = Index.load(this.props.siteSearchIndex.index)\n    this.index = index\n    return index\n  }\n\n  /*\n   * Update results after typing in.\n   */\n\n  handleInput = (evt: { target: HTMLInputElement }) => {\n    const query = evt.target.value\n    this.setState(this.doSearch(query))\n  }\n\n  /**\n   * Performs a search, and returns a state update.\n   */\n\n  doSearch = (query: string) => {\n    const index = this.getOrCreateIndex()\n\n    // Query the index with search string to get an [] of IDs,\n    // then map over each ID and return the full document\n    const results = index\n      .search(query, this.searchOpts)\n      .map(({ ref }: any) => this.index.documentStore.getDoc(ref))\n\n    return { query, results }\n  }\n\n  render() {\n    const rprops: RenderProps = {\n      query: this.state.query,\n      results: this.state.results,\n      onChange: this.handleInput\n    }\n\n    return this.props.children(rprops)\n  }\n}\n\nexport default SearchProvider\n","import React from 'react'\n\nimport { SearchPageItem, SiteSearchIndex } from '../types/types'\nimport SearchItem from './SearchItem'\nimport CSS from './SearchModal.module.css'\nimport SearchProvider, { RenderProps } from './SearchProvider'\n\nexport interface Props {\n  siteSearchIndex: SiteSearchIndex\n  initialValue: string\n  onDismiss: () => any\n}\n\nexport type ViewProps = RenderProps & {\n  onDismiss: () => any\n}\n\n/**\n * The search modal.\n * @name SearchModal\n */\n\nexport const SearchModal = (props: Props) => {\n  return (\n    <SearchProvider {...props}>\n      {(rprops: RenderProps) => (\n        <SearchModalView {...rprops} onDismiss={props.onDismiss} />\n      )}\n    </SearchProvider>\n  )\n}\n\n/**\n * Search modal view.\n */\n\nexport const SearchModalView = ({\n  query,\n  results,\n  onChange,\n  onDismiss\n}: ViewProps) => {\n  return (\n    <div className={CSS.root}>\n      <button onClick={onDismiss}>&times;</button>\n\n      <input type='text' value={query} onChange={onChange} autoFocus />\n      {results && results.length ? (\n        <ul className={CSS.list}>\n          {results.map((page: SearchPageItem) => (\n            <SearchItem page={page} key={page.title} />\n          ))}\n        </ul>\n      ) : (\n        <span>No results found</span>\n      )}\n    </div>\n  )\n}\n\nexport default SearchModal\n","/**\n * Put me anywhere for a cool search box.\n */\n\nimport { graphql, useStaticQuery } from 'gatsby'\nimport React, { useState } from 'react'\nimport CSS from './LiveSearchInput.module.css'\nimport SearchModal from './SearchModal'\n\nconst DEFAULT_STATE = {\n  isActivated: false,\n  initialValue: ''\n}\n\n/**\n * Live search input\n */\n\nconst LiveSearchInput = (props: Props) => {\n  const { siteSearchIndex } = useStaticQuery(QUERY)\n  const { state, actions } = useAppState()\n  const { placeholder } = props\n\n  return (\n    <React.Fragment>\n      <input\n        type='text'\n        placeholder={placeholder || 'Search...'}\n        className={CSS.input}\n        onChange={actions.handleInput}\n        value=''\n      />\n\n      {state.isActivated ? (\n        <SearchModal\n          siteSearchIndex={siteSearchIndex}\n          initialValue={state.initialValue}\n          onDismiss={actions.dismissModal}\n        />\n      ) : null}\n    </React.Fragment>\n  )\n}\n\nconst useAppState = () => {\n  const [state, setState] = useState<State>(DEFAULT_STATE)\n  const actions = {\n    handleInput(event: { target: HTMLInputElement }) {\n      const value = event.target.value\n\n      if (value.trim().length) {\n        setState({ ...state, isActivated: true, initialValue: value })\n      }\n    },\n    dismissModal() {\n      setState({ ...state, isActivated: false })\n    }\n  }\n  return { state, actions }\n}\n\nLiveSearchInput.defaultProps = {\n  placeholder: 'Search...'\n}\n\n/**\n * Properties\n */\n\nexport interface Props {\n  placeholder: string\n}\n\n/**\n * State\n */\n\nexport interface State {\n  /** This will be set to `true` when it's activated. */\n  isActivated: boolean\n\n  /** The initial value to be passed onto the modal dialog. */\n  initialValue: string\n}\n\n/**\n * GraphQL query\n */\n\nconst QUERY = graphql`\n  query GetSiteSearchIndex {\n    siteSearchIndex {\n      index\n    }\n  }\n`\n\n/**\n * Export\n */\n\nexport default LiveSearchInput\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport Helmet from 'react-helmet'\n\n/**\n * Props\n */\n\nexport interface Props {\n  children: React.ReactNode\n}\n\n/**\n * Base layout\n */\n\nfunction Layout({ children }: Props) {\n  return (\n    <>\n      <Helmet\n        title='Devhints.io'\n        meta={[\n          // TODO meta tags for sheets\n          { name: 'description', content: 'Sample' },\n          { name: 'keywords', content: 'sample, something' }\n        ]}\n      />\n      {children}\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * Unpath helper\n * Remove the unnecessary slashes\n */\n\nexport function unpath(path: string): string {\n  return path.replace(/^\\//, '')\n}\n\n/**\n * Convert pathname to keywords.\n *\n *     keywordify('/gatsby') => 'gatsby'\n *     keywordify('/rails/models.html') => 'rails-models'\n *     keywordify(null) => null\n */\n\nexport function keywordify(str: string | null | void) {\n  if (!str) {\n    return null\n  }\n\n  return str\n    .slice(1)\n    .replace(/^cheatsheets-ng\\//, '')\n    .replace(/\\//g, '-')\n    .replace(/ /g, '_')\n    .replace(/\\.html$/, '')\n}\n","// Main entry point\nexport { default as LiveSearchInput } from './LiveSearchInput'\n"],"sourceRoot":""}